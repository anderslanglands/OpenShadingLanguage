//
// This software is released under the MIT licence
//
// Copyright (c) 2013-2017 Anders Langlands
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to 
// deal in the Software without restriction, including without limitation the 
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
// sell copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions: 
//
//      The above copyright notice and this permission notice shall be included 
//      in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
// IN THE SOFTWARE.
//

// This code is ported from alshaders original C++ implementation:
// https://bitbucket.org/anderslanglands/alshaders
// with some modifications by the appleseed team:
// https://github.com/appleseedhq/appleseed/

#include "remap.h"

shader al_remap_color [[
    string help = "Remap an input color function with multiple controls."
]] (
    color input = 0,
    float gamma = 1 [[ 
        string label = "Gamma",
    ]],
    float saturation = 1 [[
        string label = "Saturation"
    ]],
    float hue_offset = 1 [[
        string label = "Hue offset"
    ]],
    float contrast_val = 1 [[
        string label = "Contrast"
    ]],
    float contrast_pivot = 0.18 [[
        string label = "Pivot"
    ]],
    float gain = 1 [[
        string label = "Gain"
    ]],
    float exposure = 0 [[
        string label = "Exposure"
    ]],
    float mask = 1 [[
        string label = "Mask",
        string help = "Use this input to mask off where this node applies"
    ]],
    output color result = 0
) {
    result = input;
    if (mask <= 0) return;

    if (gamma != 1) result = pow(result, 1/gamma);
    if (saturation != 1) {
        float l = luminance(result);
        result = mix(color(l), result, saturation);
    }
    if (hue_offset != 0) {
        result = transformc("rgb", "hsv", result);
        result[0] += hue_offset;
        result = transformc("hsv", "rgb", result);
    }
    if (contrast_val != 1) {
        result = contrast(result, contrast_val, contrast_pivot);
    }
    result *= gain;
    result *= pow(2, exposure);
    if (mask != 1) result = mix(input, result, mask);
}

